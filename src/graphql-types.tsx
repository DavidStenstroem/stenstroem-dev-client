/* eslint-disable */
/* This file is automatically generated. Do not edit directly. */
import gql from 'graphql-tag'
import * as ReactApollo from 'react-apollo'
import * as React from 'react'
import * as ReactApolloHooks from 'react-apollo-hooks'
export type Maybe<T> = T | null
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /** A field whose value conforms to the standard internet email address format as
   * specified in RFC822: https://www.w3.org/Protocols/rfc822/.
   */
  EmailAddress: string
  /** Use JavaScript Date object for date/time fields. */
  DateTime: Date
  JSON: { [key: string]: any }
}

export type AlbumCover = {
  __typename?: 'AlbumCover'
  id: Scalars['String']
  mediaCount: Scalars['Int']
  slug: Scalars['String']
  title: Scalars['String']
  cover: Scalars['String']
  owner: User
  isPrivate: Scalars['Boolean']
  sharedWith?: Maybe<Array<Scalars['String']>>
}

export type AuthPayload = {
  __typename?: 'AuthPayload'
  formErrors?: Maybe<Array<FormError>>
  user?: Maybe<User>
}

export type FormError = {
  __typename?: 'FormError'
  path: Scalars['String']
  message: Scalars['String']
}

export type LoginInput = {
  email: Scalars['EmailAddress']
  password: Scalars['String']
}

export type MediaStream = {
  __typename?: 'MediaStream'
  cover: Scalars['String']
  mediaCount: Scalars['Int']
}

export type Mutation = {
  __typename?: 'Mutation'
  register: AuthPayload
  login: AuthPayload
}

export type MutationRegisterArgs = {
  input: RegisterInput
}

export type MutationLoginArgs = {
  input: LoginInput
}

export type MyAlbums = {
  __typename?: 'MyAlbums'
  stream: MediaStream
  albums: Array<AlbumCover>
}

export type Query = {
  __typename?: 'Query'
  myAlbums: MyAlbums
  sharedAlbums: Array<AlbumCover>
  me?: Maybe<User>
}

export type RegisterInput = {
  email: Scalars['EmailAddress']
  name: Scalars['String']
  password: Scalars['String']
}

export type User = {
  __typename?: 'User'
  id?: Maybe<Scalars['String']>
  email: Scalars['EmailAddress']
  name: Scalars['String']
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
}
export type LoginMutationVariables = {
  input: LoginInput
}

export type LoginMutation = { __typename?: 'Mutation' } & {
  login: { __typename?: 'AuthPayload' } & {
    formErrors: Maybe<
      Array<{ __typename?: 'FormError' } & Pick<FormError, 'path' | 'message'>>
    >
    user: Maybe<{ __typename?: 'User' } & Pick<User, 'id' | 'email' | 'name'>>
  }
}

export type RegisterMutationVariables = {
  input: RegisterInput
}

export type RegisterMutation = { __typename?: 'Mutation' } & {
  register: { __typename?: 'AuthPayload' } & {
    formErrors: Maybe<
      Array<{ __typename?: 'FormError' } & Pick<FormError, 'path' | 'message'>>
    >
    user: Maybe<{ __typename?: 'User' } & Pick<User, 'id' | 'email' | 'name'>>
  }
}

export const LoginDocument = gql`
  mutation Login($input: LoginInput!) {
    login(input: $input) {
      formErrors {
        path
        message
      }
      user {
        id
        email
        name
      }
    }
  }
`
export type LoginMutationFn = ReactApollo.MutationFn<
  LoginMutation,
  LoginMutationVariables
>
export type LoginComponentProps = Omit<
  ReactApollo.MutationProps<LoginMutation, LoginMutationVariables>,
  'mutation'
>

export const LoginComponent = (props: LoginComponentProps) => (
  <ReactApollo.Mutation<LoginMutation, LoginMutationVariables>
    mutation={LoginDocument}
    {...props}
  />
)

export function useLoginMutation(
  baseOptions?: ReactApolloHooks.MutationHookOptions<
    LoginMutation,
    LoginMutationVariables
  >
) {
  return ReactApolloHooks.useMutation<LoginMutation, LoginMutationVariables>(
    LoginDocument,
    baseOptions
  )
}
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>
export const RegisterDocument = gql`
  mutation Register($input: RegisterInput!) {
    register(input: $input) {
      formErrors {
        path
        message
      }
      user {
        id
        email
        name
      }
    }
  }
`
export type RegisterMutationFn = ReactApollo.MutationFn<
  RegisterMutation,
  RegisterMutationVariables
>
export type RegisterComponentProps = Omit<
  ReactApollo.MutationProps<RegisterMutation, RegisterMutationVariables>,
  'mutation'
>

export const RegisterComponent = (props: RegisterComponentProps) => (
  <ReactApollo.Mutation<RegisterMutation, RegisterMutationVariables>
    mutation={RegisterDocument}
    {...props}
  />
)

export function useRegisterMutation(
  baseOptions?: ReactApolloHooks.MutationHookOptions<
    RegisterMutation,
    RegisterMutationVariables
  >
) {
  return ReactApolloHooks.useMutation<
    RegisterMutation,
    RegisterMutationVariables
  >(RegisterDocument, baseOptions)
}
export type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>
